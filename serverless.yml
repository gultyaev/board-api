service: aws-node-express-dynamodb-api-project
frameworkVersion: '3'

custom:
  usersTableName: 'users-table-${sls:stage}'
  columnsTableName: 'columns-table-${sls:stage}'
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      migrate: true
  endpoints:
    dynamodbURL: 'http://localhost:8000'

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-optimize

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [ColumnsTable, Arn]
  environment:
    STAGE: ${self:provider.stage}
    USERS_TABLE: ${self:custom.usersTableName}
    COLUMNS_TABLE: ${self:custom.columnsTableName}
    DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodbURL}
    SALT: 0da7092f262da23f22e377d4d7db1cd7cf64bafee0c40fc9 # Move to AWS

functions:
  api:
    handler: dist/serverless.handler
    events:
      - http:
          method: any
          path: /{any+}
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.usersTableName}
    ColumnsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.columnsTableName}
